#!/bin/sh
set -e -x

trap exit TERM INT

echo 1 > /proc/sys/net/ipv4/ip_forward || true

if [ `cat /proc/sys/net/ipv4/ip_forward` != 1 ]; then
    exit 1
fi

resolve() {
    local name="$1"
    nslookup "$name" 2>/dev/null | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"
}

resolve_first() {
    resolve $DEST_ADDR | head -n1
}

# wait until we have a valid IP, or sleep until it can be resolved
if [ -z "$DEST_IP" ] ; then
    echo "DEST_IP not set. Maybe DEST_ADDR?"
    if [ -n "$DEST_ADDR" ] ; then
        until [ -n "$(resolve_first)" ] ; do
            echo "Waiting until DEST_ADDR=$DEST_ADDR can be resolved..."
            sleep 5
        done
        DEST_IP="$(resolve_first)"
        echo "DEST_ADDR resolves to $DEST_IP"
    else
        echo "DEST_IP or DEST_ADDR must be set. For example:"
        echo "kubectl set env daemonset -n kube-system svclb-klipper DEST_ADDR=ambassador.ambassador"
        while /bin/true; do sleep 1 ; done
    fi
fi

iptables -t nat -I PREROUTING ! -s ${DEST_IP}/32 -p ${DEST_PROTO} --dport ${SRC_PORT} -j DNAT --to ${DEST_IP}:${DEST_PORT}
iptables -t nat -I POSTROUTING -d ${DEST_IP}/32 -p ${DEST_PROTO} -j MASQUERADE

if [ ! -e /pause ]; then
    mkfifo /pause
fi
</pause
